name: AKS Deployment

on:
  repository_dispatch:
    types: aks-build-api-trigger


env:
  RESOURCE_GROUP: ${{ github.event.client_payload.aks_resource_group }}
  CLUSTER_NAME: ${{ github.event.client_payload.cluster_name }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Echo the values
        run: |
          echo "cluster_name is: ${{ github.event.client_payload.client_payload }}"
          echo "azure_credentials is: ${{ github.event.client_payload.azure_credentials }}"


      - name: Payload Extracting
        run: |
          export PYTHONPATH=$PYTHONPATH:.
          pip3 install PyYAML
          python3 deployment_utils/json_converter.py --incoming_string "${{ github.event.client_payload.payload }}" --provider azure

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.client_payload.azure_credentials }}


      - name: Set Azure Subscription
        run: az account set --subscription ${{ env.AZ_SUBSCRIPTION_ID }}

      - name: Create AKS Cluster
        run: az aks create --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --node-count 1 --generate-ssh-keys --node-vm-size Standard_DS2_v2

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}


      - name: Post Deployment Tasks
        env:
          MONGO_URL: ${{ env.MONGO_URL }}
          MONGO_USER: ${{ env.MONGO_USER }}
          MONGO_PASSWORD: ${{ env.MONGO_PASSWORD }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          KUBECONFIG: /home/runner/.kube/config

        run: |
          export PYTHONPATH=$PYTHONPATH:.
          az aks get-credentials --name ${{ env.CLUSTER_NAME }} --overwrite-existing --resource-group ${{ env.AZ_RESOURCE_GROUP }}
          pip3 install -r web/requirements.txt
          python3 deployment_utils/kubernetes_post_deployment.py --cluster_type aks --project_name ${{ env.PROJECT_NAME }} --cluster_name ${{ env.CLUSTER_NAME }} --user_name ${{ env.USER_NAME }} --resource_group ${{ env.AZ_RESOURCE_GROUP }} --region_name ${{ env.AZ_LOCATION }} --expiration_time ${{ env.EXPIRATION_TIME }}

      - name: Deleting Cluster
        if: always()
        run: |
          az aks delete --name=${{ env.CLUSTER_NAME }} --resource-group=${{ env.AZ_RESOURCE_GROUP }} --yes